Problem at Hand:

- Write a program that takes the input of books from a separate file, sorts the books by title, and allows the user to print out all of the sorted books at their own pace, search for a certain book by title, or exiting the program.  All of this will be done at the user's pace using a main menu. The user will also be able to view all of the .dat files in the directory, and type in the file they wish to import books from.

- For example, if a file called test.dat ontained three books: Animal Farm, The Last of the Mohicans, and Gregor the Overlander was the only file in the directory, then the program would first display all .dat files, which would only show test.dat and prompt the user to enter a file.  Once the user enters test.dat, then the program will pull the books from the file, and sort them by title, and finally telling the user the books were sorted and how many were sorted.  Once the user hits return, the program will move on to the home page, where three options are presented: display all books, search for a book, or exit the program.  if the user selects the first option by entering 1, then the three books will be displayed, one at a time, in sorted order, until the user either hits return to move on to the next book or hits the letter M to go back to the main menu.  Once the user is back at the main menu, if they select option 2, then they can search for a book.  If the user searches for the book "Animal Farm", the program will display the information corresponding with Animal Farm.  Finally, once back at the main menu, if the user hits 3, they will exit the program.

- The books are input as LibraryBooks by utilizing a class file named LibraryBook.  When searching for a book, the String of the title of the book is compared to the user's input.  Selection sort is utilized for the sorting of the books.  For example, if an array of five integers, 1 , 3 , 2 , 5, 7, are sent to be selection sorted in increasing order, then the sort traverses through the array searching for the smallest number, and when that is found, it is switched with the first array slot.  This process continues until the array is properly sorted.  To search for a book, a modified BinarySearch is utilized.  For example, by using the same array above but after it is ran through the selectionSort, the array would now be : 1, 2, 3, 5, 7.  If we wanted to find the number 7, then the binarySearch would first find the first array slot and the last array slot and divide by 2 to get the middle value.  Once the middle slot was found, the search would return the value for the middle slot, in this case being 3, and compare this to the BinarySearch key, in this case being 7.  Since 7 > 3, the array slot for 3 becomes the first value and the new middle value is calculated.  This process is repeated until the key is found.

Algorithm:

- To tackle this project, I will first divide the task into four sections: the first screen of the program which displays all .dat files in the directory, the main screen of the program which allows the user to select which option they would like to do, displaying the first option of viewing all of the book records, and displaying the second option of searching for a particular book.  The most important methods that will be utilized will be a method to pull the book information from the user inputted file and neatly placed into an ArrayList of the LibraryBook type, which can be found in a separate class file, a method that will sort all of the inputted books by the books title, and  a method which will utilize a binary search to find the desired book.  All other methods will aid in the process of traversing through the interactive menu to allow the user to go at their desired pace, as well as print methods that clean up the printing of each menu.
